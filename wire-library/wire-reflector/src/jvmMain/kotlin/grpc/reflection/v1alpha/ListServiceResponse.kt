// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.reflection.v1alpha.ListServiceResponse in grpc/reflection/v1alpha/reflection.proto
package grpc.reflection.v1alpha

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.checkElementsNotNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * A list of ServiceResponse sent by the server answering list_services request.
 */
public class ListServiceResponse(
  service: List<ServiceResponse> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ListServiceResponse, ListServiceResponse.Builder>(ADAPTER, unknownFields) {
  /**
   * The information of each service may be expanded in the future, so we use
   * ServiceResponse message to encapsulate it.
   */
  @field:WireField(
    tag = 1,
    adapter = "grpc.reflection.v1alpha.ServiceResponse#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  public val service: List<ServiceResponse> = immutableCopyOf("service", service)

  public override fun newBuilder(): Builder {
    val builder = Builder()
    builder.service = service
    builder.addUnknownFields(unknownFields)
    return builder
  }

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ListServiceResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (service != other.service) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + service.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (service.isNotEmpty()) result += """service=$service"""
    return result.joinToString(prefix = "ListServiceResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(service: List<ServiceResponse> = this.service, unknownFields: ByteString =
      this.unknownFields): ListServiceResponse = ListServiceResponse(service, unknownFields)

  public class Builder : Message.Builder<ListServiceResponse, Builder>() {
    @JvmField
    public var service: List<ServiceResponse> = emptyList()

    /**
     * The information of each service may be expanded in the future, so we use
     * ServiceResponse message to encapsulate it.
     */
    public fun service(service: List<ServiceResponse>): Builder {
      checkElementsNotNull(service)
      this.service = service
      return this
    }

    public override fun build(): ListServiceResponse = ListServiceResponse(
      service = service,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ListServiceResponse> = object :
        ProtoAdapter<ListServiceResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      ListServiceResponse::class, 
      "type.googleapis.com/grpc.reflection.v1alpha.ListServiceResponse", 
      PROTO_3, 
      null
    ) {
      public override fun encodedSize(value: ListServiceResponse): Int {
        var size = value.unknownFields.size
        size += ServiceResponse.ADAPTER.asRepeated().encodedSizeWithTag(1, value.service)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: ListServiceResponse): Unit {
        ServiceResponse.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.service)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): ListServiceResponse {
        val service = mutableListOf<ServiceResponse>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> service.add(ServiceResponse.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return ListServiceResponse(
          service = service,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: ListServiceResponse): ListServiceResponse = value.copy(
        service = value.service.redactElements(ServiceResponse.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
