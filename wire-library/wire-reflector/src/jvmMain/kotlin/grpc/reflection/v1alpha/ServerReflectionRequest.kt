// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.reflection.v1alpha.ServerReflectionRequest in grpc/reflection/v1alpha/reflection.proto
package grpc.reflection.v1alpha

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.countNonNull
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * The message sent by the client when calling ServerReflectionInfo method.
 */
public class ServerReflectionRequest(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  @JvmField
  public val host: String = "",
  /**
   * Find a proto file by the file name.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "fileByFilename"
  )
  @JvmField
  public val file_by_filename: String? = null,
  /**
   * Find the proto file that declares the given fully-qualified symbol name.
   * This field should be a fully-qualified symbol name
   * (e.g. <package>.<service>\[.<method>\] or <package>.<type>).
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "fileContainingSymbol"
  )
  @JvmField
  public val file_containing_symbol: String? = null,
  /**
   * Find the proto file which defines an extension extending the given
   * message type with the given field number.
   */
  @field:WireField(
    tag = 5,
    adapter = "grpc.reflection.v1alpha.ExtensionRequest#ADAPTER",
    jsonName = "fileContainingExtension"
  )
  @JvmField
  public val file_containing_extension: ExtensionRequest? = null,
  /**
   * Finds the tag numbers used by all known extensions of the given message
   * type, and appends them to ExtensionNumberResponse in an undefined order.
   * Its corresponding method is best-effort: it's not guaranteed that the
   * reflection service will implement this method, and it's not guaranteed
   * that this method will provide all extensions. Returns
   * StatusCode::UNIMPLEMENTED if it's not implemented.
   * This field should be a fully-qualified type name. The format is
   * <package>.<type>
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "allExtensionNumbersOfType"
  )
  @JvmField
  public val all_extension_numbers_of_type: String? = null,
  /**
   * List the full names of registered services. The content will not be
   * checked.
   */
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    jsonName = "listServices"
  )
  @JvmField
  public val list_services: String? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ServerReflectionRequest, ServerReflectionRequest.Builder>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(file_by_filename, file_containing_symbol, file_containing_extension,
        all_extension_numbers_of_type, list_services) <= 1) {
      "At most one of file_by_filename, file_containing_symbol, file_containing_extension, all_extension_numbers_of_type, list_services may be non-null"
    }
  }

  public override fun newBuilder(): Builder {
    val builder = Builder()
    builder.host = host
    builder.file_by_filename = file_by_filename
    builder.file_containing_symbol = file_containing_symbol
    builder.file_containing_extension = file_containing_extension
    builder.all_extension_numbers_of_type = all_extension_numbers_of_type
    builder.list_services = list_services
    builder.addUnknownFields(unknownFields)
    return builder
  }

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ServerReflectionRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (host != other.host) return false
    if (file_by_filename != other.file_by_filename) return false
    if (file_containing_symbol != other.file_containing_symbol) return false
    if (file_containing_extension != other.file_containing_extension) return false
    if (all_extension_numbers_of_type != other.all_extension_numbers_of_type) return false
    if (list_services != other.list_services) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + host.hashCode()
      result = result * 37 + file_by_filename.hashCode()
      result = result * 37 + file_containing_symbol.hashCode()
      result = result * 37 + file_containing_extension.hashCode()
      result = result * 37 + all_extension_numbers_of_type.hashCode()
      result = result * 37 + list_services.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """host=${sanitize(host)}"""
    if (file_by_filename != null) result += """file_by_filename=${sanitize(file_by_filename)}"""
    if (file_containing_symbol != null) result +=
        """file_containing_symbol=${sanitize(file_containing_symbol)}"""
    if (file_containing_extension != null) result +=
        """file_containing_extension=$file_containing_extension"""
    if (all_extension_numbers_of_type != null) result +=
        """all_extension_numbers_of_type=${sanitize(all_extension_numbers_of_type)}"""
    if (list_services != null) result += """list_services=${sanitize(list_services)}"""
    return result.joinToString(prefix = "ServerReflectionRequest{", separator = ", ", postfix = "}")
  }

  public fun copy(
    host: String = this.host,
    file_by_filename: String? = this.file_by_filename,
    file_containing_symbol: String? = this.file_containing_symbol,
    file_containing_extension: ExtensionRequest? = this.file_containing_extension,
    all_extension_numbers_of_type: String? = this.all_extension_numbers_of_type,
    list_services: String? = this.list_services,
    unknownFields: ByteString = this.unknownFields
  ): ServerReflectionRequest = ServerReflectionRequest(host, file_by_filename,
      file_containing_symbol, file_containing_extension, all_extension_numbers_of_type,
      list_services, unknownFields)

  public class Builder : Message.Builder<ServerReflectionRequest, Builder>() {
    @JvmField
    public var host: String = ""

    @JvmField
    public var file_by_filename: String? = null

    @JvmField
    public var file_containing_symbol: String? = null

    @JvmField
    public var file_containing_extension: ExtensionRequest? = null

    @JvmField
    public var all_extension_numbers_of_type: String? = null

    @JvmField
    public var list_services: String? = null

    public fun host(host: String): Builder {
      this.host = host
      return this
    }

    /**
     * Find a proto file by the file name.
     */
    public fun file_by_filename(file_by_filename: String?): Builder {
      this.file_by_filename = file_by_filename
      this.file_containing_symbol = null
      this.file_containing_extension = null
      this.all_extension_numbers_of_type = null
      this.list_services = null
      return this
    }

    /**
     * Find the proto file that declares the given fully-qualified symbol name.
     * This field should be a fully-qualified symbol name
     * (e.g. <package>.<service>\[.<method>\] or <package>.<type>).
     */
    public fun file_containing_symbol(file_containing_symbol: String?): Builder {
      this.file_containing_symbol = file_containing_symbol
      this.file_by_filename = null
      this.file_containing_extension = null
      this.all_extension_numbers_of_type = null
      this.list_services = null
      return this
    }

    /**
     * Find the proto file which defines an extension extending the given
     * message type with the given field number.
     */
    public fun file_containing_extension(file_containing_extension: ExtensionRequest?): Builder {
      this.file_containing_extension = file_containing_extension
      this.file_by_filename = null
      this.file_containing_symbol = null
      this.all_extension_numbers_of_type = null
      this.list_services = null
      return this
    }

    /**
     * Finds the tag numbers used by all known extensions of the given message
     * type, and appends them to ExtensionNumberResponse in an undefined order.
     * Its corresponding method is best-effort: it's not guaranteed that the
     * reflection service will implement this method, and it's not guaranteed
     * that this method will provide all extensions. Returns
     * StatusCode::UNIMPLEMENTED if it's not implemented.
     * This field should be a fully-qualified type name. The format is
     * <package>.<type>
     */
    public fun all_extension_numbers_of_type(all_extension_numbers_of_type: String?): Builder {
      this.all_extension_numbers_of_type = all_extension_numbers_of_type
      this.file_by_filename = null
      this.file_containing_symbol = null
      this.file_containing_extension = null
      this.list_services = null
      return this
    }

    /**
     * List the full names of registered services. The content will not be
     * checked.
     */
    public fun list_services(list_services: String?): Builder {
      this.list_services = list_services
      this.file_by_filename = null
      this.file_containing_symbol = null
      this.file_containing_extension = null
      this.all_extension_numbers_of_type = null
      return this
    }

    public override fun build(): ServerReflectionRequest = ServerReflectionRequest(
      host = host,
      file_by_filename = file_by_filename,
      file_containing_symbol = file_containing_symbol,
      file_containing_extension = file_containing_extension,
      all_extension_numbers_of_type = all_extension_numbers_of_type,
      list_services = list_services,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ServerReflectionRequest> = object :
        ProtoAdapter<ServerReflectionRequest>(
      FieldEncoding.LENGTH_DELIMITED, 
      ServerReflectionRequest::class, 
      "type.googleapis.com/grpc.reflection.v1alpha.ServerReflectionRequest", 
      PROTO_3, 
      null
    ) {
      public override fun encodedSize(value: ServerReflectionRequest): Int {
        var size = value.unknownFields.size
        if (value.host != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.host)
        size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.file_by_filename)
        size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.file_containing_symbol)
        size += ExtensionRequest.ADAPTER.encodedSizeWithTag(5, value.file_containing_extension)
        size += ProtoAdapter.STRING.encodedSizeWithTag(6, value.all_extension_numbers_of_type)
        size += ProtoAdapter.STRING.encodedSizeWithTag(7, value.list_services)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: ServerReflectionRequest): Unit {
        if (value.host != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.host)
        ProtoAdapter.STRING.encodeWithTag(writer, 3, value.file_by_filename)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.file_containing_symbol)
        ExtensionRequest.ADAPTER.encodeWithTag(writer, 5, value.file_containing_extension)
        ProtoAdapter.STRING.encodeWithTag(writer, 6, value.all_extension_numbers_of_type)
        ProtoAdapter.STRING.encodeWithTag(writer, 7, value.list_services)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): ServerReflectionRequest {
        var host: String = ""
        var file_by_filename: String? = null
        var file_containing_symbol: String? = null
        var file_containing_extension: ExtensionRequest? = null
        var all_extension_numbers_of_type: String? = null
        var list_services: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> host = ProtoAdapter.STRING.decode(reader)
            3 -> file_by_filename = ProtoAdapter.STRING.decode(reader)
            4 -> file_containing_symbol = ProtoAdapter.STRING.decode(reader)
            5 -> file_containing_extension = ExtensionRequest.ADAPTER.decode(reader)
            6 -> all_extension_numbers_of_type = ProtoAdapter.STRING.decode(reader)
            7 -> list_services = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ServerReflectionRequest(
          host = host,
          file_by_filename = file_by_filename,
          file_containing_symbol = file_containing_symbol,
          file_containing_extension = file_containing_extension,
          all_extension_numbers_of_type = all_extension_numbers_of_type,
          list_services = list_services,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: ServerReflectionRequest): ServerReflectionRequest =
          value.copy(
        file_containing_extension =
            value.file_containing_extension?.let(ExtensionRequest.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
