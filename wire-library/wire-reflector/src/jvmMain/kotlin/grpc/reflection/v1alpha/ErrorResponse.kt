// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.reflection.v1alpha.ErrorResponse in grpc/reflection/v1alpha/reflection.proto
package grpc.reflection.v1alpha

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * The error code and error message sent by the server when an error occurs.
 */
public class ErrorResponse(
  /**
   * This field uses the error codes defined in grpc::StatusCode.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "errorCode"
  )
  @JvmField
  public val error_code: Int = 0,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "errorMessage"
  )
  @JvmField
  public val error_message: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ErrorResponse, ErrorResponse.Builder>(ADAPTER, unknownFields) {
  public override fun newBuilder(): Builder {
    val builder = Builder()
    builder.error_code = error_code
    builder.error_message = error_message
    builder.addUnknownFields(unknownFields)
    return builder
  }

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ErrorResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (error_code != other.error_code) return false
    if (error_message != other.error_message) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + error_code.hashCode()
      result = result * 37 + error_message.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """error_code=$error_code"""
    result += """error_message=${sanitize(error_message)}"""
    return result.joinToString(prefix = "ErrorResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    error_code: Int = this.error_code,
    error_message: String = this.error_message,
    unknownFields: ByteString = this.unknownFields
  ): ErrorResponse = ErrorResponse(error_code, error_message, unknownFields)

  public class Builder : Message.Builder<ErrorResponse, Builder>() {
    @JvmField
    public var error_code: Int = 0

    @JvmField
    public var error_message: String = ""

    /**
     * This field uses the error codes defined in grpc::StatusCode.
     */
    public fun error_code(error_code: Int): Builder {
      this.error_code = error_code
      return this
    }

    public fun error_message(error_message: String): Builder {
      this.error_message = error_message
      return this
    }

    public override fun build(): ErrorResponse = ErrorResponse(
      error_code = error_code,
      error_message = error_message,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ErrorResponse> = object : ProtoAdapter<ErrorResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      ErrorResponse::class, 
      "type.googleapis.com/grpc.reflection.v1alpha.ErrorResponse", 
      PROTO_3, 
      null
    ) {
      public override fun encodedSize(value: ErrorResponse): Int {
        var size = value.unknownFields.size
        if (value.error_code != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1,
            value.error_code)
        if (value.error_message != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.error_message)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: ErrorResponse): Unit {
        if (value.error_code != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.error_code)
        if (value.error_message != "") ProtoAdapter.STRING.encodeWithTag(writer, 2,
            value.error_message)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): ErrorResponse {
        var error_code: Int = 0
        var error_message: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> error_code = ProtoAdapter.INT32.decode(reader)
            2 -> error_message = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ErrorResponse(
          error_code = error_code,
          error_message = error_message,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: ErrorResponse): ErrorResponse = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
